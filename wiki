#!/bin/sh

readonly VERSION="25.08"

readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1

readonly ENV_OPTS="WIKI_PATH \
									 WIKI_INBOX \
									 WIKI_PAGER_CMD \
									 WIKI_PAGER_OPTS \
									 WIKI_PREVIEW_CMD \
									 WIKI_PREVIEW_OPTS \
									 WIKI_FILEMGR_CMD \
									 WIKI_FILEMGR_OPTS \
									 WIKI_GREP_OPTS"

OPT_WIKI_PATH="${WIKI_PATH:-}"

OPT_WIKI_INBOX="${WIKI_INBOX:-}"
OPT_WIKI_NEW_FILE=""

OPT_WIKI_PRINT_FNAME=""
OPT_WIKI_OPEN=""

OPT_WIKI_PAGER_CMD="${WIKI_PAGER_CMD:-less}"
OPT_WIKI_PAGER_OPTS="${WIKI_PAGER_OPTS:-}"

OPT_WIKI_PREVIEW_CMD="${WIKI_PREVIEW_CMD:-cat}"
OPT_WIKI_PREVIEW_OPTS="${WIKI_PREVIEW_OPTS:-}"

OPT_WIKI_FILEMGR_CMD="${WIKI_FILEMGR_CMD:-tree}"
OPT_WIKI_FILEMGR_OPTS="${WIKI_FILEMGR_OPTS:-}"

OPT_WIKI_GREP_QUERY=""
OPT_WIKI_GREP_OPTS="${WIKI_GREP_OPTS:--i}"

print_version() {
	echo >&2 "wiki ${VERSION}"
}

print_usage() {
	cat >&2 <<EOF
USAGE: $(basename "${PROG}") [OPTIONS..] [FILENAME]

OPTIONS:
  --help, -h               Print usage
  --version, -V            Print the version

  --path PATH              Specify PATH to wiki directory

  --new, -n NAME           Create a new entry
  --inbox, -I PATH         Specify PATH where new entries are created
  --print, -f              Print the selected filename and exit
  --open, -o               Open the wiki directory

  --grep, -g QUERY         Search files for QUERY
  --grep-opts OPTS         Pass in options to grep

  --pager, -p PAGER        Open files with PAGER
  --pager-opts OPTS        Pass in options to the pager command

  --filemgr, -F FILEMGR    Open wiki directory with FILEMGR
  --filemgr-opts OPTS      Pass in options to the file manager command

  --preview, -P PREVIEW    Preview files with PREVIEW
  --preview-opts OPTS      Pass in options to the preview command

VALUES:
EOF

	for var in $ENV_OPTS; do
		printf '  %-18s = "%s"\n' "$var" "$(eval echo "\${OPT_$var:-}")"
	done
}

parse() {
	while [ "$#" -gt 0 ]; do
		case "${1}" in
			--help|-h)
				print_usage
				exit $EXIT_SUCCESS
				;;
			--version|-V)
				print_version
				exit $EXIT_SUCCESS
				;;
			--path)
				OPT_WIKI_PATH="$2"
				shift 2
				;;
			--new|-n)
				OPT_WIKI_NEW_FILE="${OPT_WIKI_INBOX}/${2}.md"
				shift 2
				;;
			--inbox|-I)
				OPT_WIKI_INBOX="$2"
				shift 2
				;;
			--print|-f)
				OPT_WIKI_PRINT_FNAME=1
				shift
				;;
			--open|-o)
				OPT_WIKI_OPEN=1
				shift
				;;
			--pager|-p)
				OPT_WIKI_PAGER_CMD="$2"
				shift 2
				;;
			--pager-opts)
				OPT_WIKI_PAGER_OPTS="$2"
				shift 2
				;;
			--preview|-P)
				OPT_WIKI_PREVIEW_CMD="$2"
				shift 2
				;;
			--preview-opts)
				OPT_WIKI_PREVIEW_OPTS="$2"
				shift 2
				;;
			--filemgr|-F)
				OPT_WIKI_FILEMGR_CMD="$2"
				shift 2
				;;
			--filemgr-opts)
				OPT_WIKI_FILEMGR_OPTS="$2"
				shift 2
				;;
			--grep|-g)
				OPT_WIKI_GREP_QUERY="$2"
				shift 2
				;;
			--grep-opts)
				OPT_WIKI_GREP_OPTS="$2"
				shift 2
				;;
			*)
				OPT_QUERY="${*}"
				break
				;;
		esac
	done
}

check_sanity() {
	# Ensure wiki path is set and exists
	[ -n "${OPT_WIKI_PATH}" ] || {
		echo >&2 "Please set WIKI_PATH or use --path"
		return $EXIT_FAILURE
	}

	[ -d "${OPT_WIKI_PATH}" ] || {
		echo >&2 "${OPT_WIKI_PATH} does not exist"
	}

	# Ensure fzf exists
	command -v fzf >/dev/null 2>&1 || {
		echo >&2 "Could not find 'fzf' in your PATH"
		return $EXIT_FAILURE
	}

	# Ensure pager is set and exists
	[ -n "${OPT_WIKI_PAGER_CMD}" ] || {
		echo >&2 "Please set WIKI_PAGER_CMD or use --pager"
		return $EXIT_FAILURE
	}

	command -v "${OPT_WIKI_PAGER_CMD}" >/dev/null 2>&1 || {
		echo >&2 "Pager command '${OPT_WIKI_PAGER_CMD}' could not be found"
		return $EXIT_FAILURE
	}

	# Ensure preview command is set and exists
	[ -n "${OPT_WIKI_PREVIEW_CMD}" ] || {
		echo >&2 "Please set WIKI_PREVIEW_CMD or use --preview"
		return $EXIT_FAILURE
	}

	command -v "${OPT_WIKI_PREVIEW_CMD}" >/dev/null 2>&1 || {
		echo >&2 "Preview command '${OPT_WIKI_PREVIEW_CMD}' could not be found"
		return $EXIT_FAILURE
	}

	# Ensure file manager is set and exists
	[ -n "${OPT_WIKI_FILEMGR_CMD}" ] || {
		echo >&2 "Please set WIKI_FILEMGR_CMD or use --filemgr"
		return $EXIT_FAILURE
	}

	command -v "${OPT_WIKI_FILEMGR_CMD}" >/dev/null 2>&1 || {
		echo >&2 "File manager command '${OPT_WIKI_FILEMGR_CMD}' could not be found"
		return $EXIT_FAILURE
	}
}

find_files() (
	IFS=":"

	[ -z "${OPT_WIKI_GREP_QUERY}" ] || {
		# shellcheck disable=SC2086
		find "${OPT_WIKI_PATH}" -type f -print0 |
			sed -z '/\/\./d' |
			xargs -0 grep -l ${OPT_WIKI_GREP_OPTS} "${OPT_WIKI_GREP_QUERY}" |
			sed "s|${OPT_WIKI_PATH}/||"

	  return $EXIT_SUCCESS
	}

	find "${OPT_WIKI_PATH}" -type f ! -path '**/.*' -prune -printf '%P\n'
)

run() {
	find_files | fzf \
		--ansi \
		--select-1 \
		--preview="${OPT_WIKI_PREVIEW_CMD} ${OPT_WIKI_PREVIEW_OPTS} ${OPT_WIKI_PATH}/{}" \
		--query="${OPT_QUERY:-}"
}

main() {
	set -eu
	readonly PROG="${0}"

	parse "$@"
	check_sanity

	[ -z "$OPT_WIKI_OPEN" ] || {
		"${OPT_WIKI_FILEMGR_CMD}" \
			"${OPT_WIKI_FILEMGR_OPTS}" \
			"${OPT_WIKI_PATH}"

		return $EXIT_SUCCESS
	}

	# FIXME
	if [ -n "$OPT_WIKI_NEW_FILE" ]; then
		fname="$OPT_WIKI_NEW_FILE"
	else
		fname="$(run)"
	fi

	[ -n "${fname}" ] ||
		return $EXIT_SUCCESS

	[ -z "${OPT_WIKI_PRINT_FNAME}" ] || {
		echo "${OPT_WIKI_PATH}/${fname}"
		return $EXIT_SUCCESS
	}

	cd "${OPT_WIKI_PATH}"

	# shellcheck disable=SC2086
	"${OPT_WIKI_PAGER_CMD}" ${OPT_WIKI_PAGER_OPTS} "${fname}"
}

main "$@"
